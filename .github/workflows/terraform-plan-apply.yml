name: Terraform Plan and Apply

on:
  workflow_run:
    workflows: ["Generate Terraform Docs"]
    types:
      - completed
    branches:
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (e.g., dev, staging, prod)'
        required: true
        default: 'dev'

      auto_apply:
        description: 'Automatically apply the plan after successful planning?'
        type: boolean
        default: false

      ref:
        description: 'Git ref (branch, tag, or SHA) to checkout'
        required: false
        default: 'main'

      runner_label:
        description: 'Runner label(s) to use (e.g., ubuntu-latest, self-hosted)'
        required: false
        type: string
        default: 'ubuntu-latest'

permissions:
  contents: read
  id-token: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-topics:
    runs-on: ubuntu-latest
    outputs:
      is_master: ${{ steps.topics.outputs.is_master }}
    steps:
      - name: Get repository topics
        id: topics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const topics = repo.topics || [];
            core.setOutput('is_master', topics.includes('template-master'));

  plan:
    name: Terraform Plan (${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'main' }})
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.workflow_run.conclusion == 'success' && !contains(github.event.workflow_run.head_commit.message, '[skip ci]'))
    runs-on: ${{ github.event.inputs.runner_label || 'ubuntu-latest' }}
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.event.inputs.ref || github.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Init
        id: init
        working-directory: .
        continue-on-error: false
        run: terraform init -backend=false
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

        # run: terraform init -backend-config="key=path/to/state/${{ github.event.inputs.environment || 'main' }}.tfstate" ...

      - name: Terraform Plan
        id: plan
        working-directory: .
        continue-on-error: false
        run: |
          terraform plan -no-color -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

        # run: terraform plan -no-color -out=tfplan -var-file="config/${{ github.event.inputs.environment || 'main' }}.tfvars"

      # NEW: Convert binary plan to JSON format
      - name: Convert Plan to JSON
        id: plan_json
        working-directory: .
        run: terraform show -no-color -json tfplan > tfplan.json

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.run_id }} # Keep artifact name consistent for now
          path: tfplan.json # <-- Upload the JSON file

      - name: Create Plan Output for PR Comment
        id: plan_output
        if: github.event_name == 'pull_request'
        run: |
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          # Use the binary 'tfplan' for the readable 'terraform show' output for the comment
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `${{ steps.plan_output.outputs.plan_output }}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  apply:
    name: Terraform Apply (${{ github.event.inputs.environment || 'main' }})
    needs: [plan, detect-topics]
    if: |
      needs.detect-topics.outputs.is_master == 'true' &&
      success() && 
      (
        (github.event_name == 'workflow_run' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.auto_apply == 'true')
      )
    runs-on: ${{ github.event.inputs.runner_label || 'ubuntu-latest' }}
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.event.inputs.ref || github.ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Init
        id: init
        working-directory: .
        continue-on-error: false
        run: |
          terraform init -backend=false
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Apply
        id: apply
        working-directory: .
        continue-on-error: false
        run: |
          terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Determine Environment Name
        id: determine_env
        run: |
          ENV_NAME="${{ github.event.inputs.environment || github.ref_name }}"
          echo "Determined environment: $ENV_NAME"
          echo "environment_name=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "$ENV_NAME" > environment.txt
        shell: bash

      - name: Upload Environment Artifact
        uses: actions/upload-artifact@v4
        with:
          name: environment-${{ github.run_id }}
          path: environment.txt
      # --- End Environment Upload ---

      # --- Encrypt and Upload State File ---
      - name: Check for State File
        id: check_state
        run: |
          if [ -f "terraform.tfstate" ]; then
            echo "State file found."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "State file terraform.tfstate not found. Skipping encryption and upload."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Setup Node.js for Encryption
        if: steps.check_state.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Encrypt State File using Node.js script
        if: steps.check_state.outputs.exists == 'true'
        id: encrypt_state
        env:
          # Pass the PUBLIC key from secrets to the environment
          RSA_PUBLIC_KEY_PEM: ${{ secrets.RSA_PUBLIC_KEY }}
        run: |
          if [ -z "$RSA_PUBLIC_KEY_PEM" ]; then
            echo "::error::RSA_PUBLIC_KEY secret is not set. Cannot encrypt state file."
            exit 1
          fi
          INPUT_FILE="terraform.tfstate"
          OUTPUT_FILE="tfstate-encrypted-${{ github.run_id }}.enc"
          SCRIPT_PATH="./scripts/encrypt-state.js" # Assuming script is checked into repo

          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "::error::Encryption script not found at $SCRIPT_PATH"
            exit 1
          fi

          # Make script executable (needed on some runners)
          chmod +x "$SCRIPT_PATH"

          echo "Running encryption script..."
          # Pass public key as a single string argument, ensure quoting handles newlines
          node "$SCRIPT_PATH" "$INPUT_FILE" "$RSA_PUBLIC_KEY_PEM" "$OUTPUT_FILE"

          # Check exit code of the script
          if [ $? -ne 0 ]; then
            echo "::error::Node.js encryption script failed."
            exit 1
          fi

          echo "Node.js encryption script completed successfully."
          # Clean up original state file
          rm "$INPUT_FILE"
        shell: bash

      - name: Upload Encrypted State Artifact
        if: steps.check_state.outputs.exists == 'true' && steps.encrypt_state.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-encrypted-${{ github.run_id }} # Artifact name matches the file
          path: tfstate-encrypted-${{ github.run_id }}.enc 
name: Generate Terraform Docs

on:
  workflow_dispatch:
    # Optional: Define inputs for manual runs if needed
    # inputs:
    #   branch:
    #     description: 'Branch to generate docs for'     
    #     required: true
    #     default: 'main'

  workflow_run:
    workflows: ["Terraform Lint, Validate, and Security Scan"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write

jobs:
  docs:
    name: Generate Terraform Docs
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:

      #####################
      # GIT CHECKOUT TASK #
      #####################

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main 
          fetch-depth: 0

      #################
      # GIT PULL TASK #
      #################

      - name: Pull latest changes from main
        run: git pull origin main --ff-only 

      #######################
      # TERRAFORM DOCS TASK #
      #######################

      - name: Generate terraform docs
        uses: terraform-docs/gh-actions@v1
        id: terraform-docs
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "false"

      #############################################
      # CHECK FOR DOC CHANGES & CREATE PR TASK    #
      #############################################

      - name: Check for Documentation Changes & Create PR
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_BASE_NAME: ${{ github.ref_name }}
          PR_TITLE: "docs: Auto-update Terraform documentation"
        run: |
          if ! git diff --quiet README.md; then
            echo "README.md has changed."

            # Check for existing PR
            EXISTING_PR_URL=$(gh pr list --state open --search "\"$PR_TITLE\" in:title repo:$GITHUB_REPOSITORY head:auto/terraform-docs-" --json url -q '.[0].url')

            if [ -n "$EXISTING_PR_URL" ]; then
              echo "An open PR for documentation updates already exists: $EXISTING_PR_URL"
              echo "Skipping new PR creation."
              exit 0
            fi

            echo "No existing open PR found. Proceeding to create one."
            git config --local user.email "automation@buungroup.com"
            git config --local user.name "Buun Group Automation [Bot]"

            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            BRANCH_NAME="auto/terraform-docs-$SHORT_SHA"
            git checkout -b $BRANCH_NAME

            git add README.md
            git commit -m "docs: Auto-update Terraform documentation [skip ci]"
            git push origin $BRANCH_NAME

            gh pr create \\
              --title "docs: Auto-update Terraform documentation" \\
              --body "This PR was created automatically to update Terraform documentation based on recent changes. [skip ci]" \\
              --base "$BRANCH_BASE_NAME" \\
              --head "$BRANCH_NAME"
            
            sleep 5 
            PR_URL=$(gh pr view $BRANCH_NAME --json url -q .url)
            if [ -n "$PR_URL" ]; then
              gh pr comment "$PR_URL" --body "Terraform documentation automatically updated. To enable auto-merging for these PRs, please ensure the 'Auto Merge' workflow is configured to handle branches starting with 'auto/terraform-docs-*'."
            else
              echo "Could not retrieve PR URL to comment."
            fi
            echo "Pull Request for documentation changes created successfully."
          else
            echo "No changes to README.md. No PR needed."
          fi 